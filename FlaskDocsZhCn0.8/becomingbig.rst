.. _becomingbig:

大型应用
============

你的应用变得越来越复杂了？如果实然觉得 Flask 已经不适应你的应用了，那么有许多
途径可以扩展 Falsk 。

Flask 由 Werkzeug 库和 Jinja2 库强力驱动。这两个库应用于许多大型网站。作为一个
微框架 Flask 只是把这两个库整合在一起而已。对于大型应用，可以非常方便地把 Flask
的代码整合到一个新的模块中进行扩展。

Flask 可以以多种方式进行扩充：

-   Flask 扩展。你可以使用许多可以重用的功能来创建扩展。 Flask 的信号和回调函数
    可以用于创建扩展。

-   子类。可以通过创建 :class:`~flask.Flask` 的子类来修改其功能，可以重载其方法
    来为特定的功能服务。

-   分支。如果上述方法还是无法满足你的需求，那么你可以创建分支，把代码复制到你的
    应用中，并加以修改。 Flask 的设计方式使得修改工作变更非常方便。

为什么要创建分支？
---------------------

Flask 的主要代码都位于 Werkzeug 和 Jinja2 之中。这两个库完成了大多数工作， Flask
只是把这两个库整合在一起而已。对于每个项目来说，应当由其基础框架来完成大多数
工作。否则将会形成一个非常复杂的框架，势必带来陡峭的学习曲线，从而吓退用户。

Flask 并不推崇唯一版本。许多人为了避免缺陷，都使用打过补丁或修改过的版本。这个
理念在 Flask 的许可中也有所体现：你不必返回你对框架所做的修改。

分支的缺点是大多数扩展都会失效，因为新的框架会使用不同的导入名称。更进一步：
整合上游的变动将会变得十分复杂，上游变动越多，则整合越复杂。因此，创建分支一般
是不得不为之的最后一招。

专家级的伸缩性
------------------

对于大多数网络应用来说，最复杂的莫过于对于用户量和数据量提供良好的伸缩性。
Flask 本身具有良好的伸缩性，其伸缩性受限于你的应用代码、所使用的数据储存方式、
Python 实现和应用所运行的服务器。

如果服务器数量增加一倍，你的应用性能就增加一倍，那么就代表伸缩性好。如果伸缩性
不好，那么即使增加服务器的数量，也不会得到更好的性能。伸缩性更差的甚至不支持增加
第二台服务器。

Flask 中唯一影响伸缩性的因素是环境本地代理。Flask 中的环境本地代理可以被定义为
线程、进程或 greenlet 。如果你的服务器不支持这些，那么 Flask 就不能支持全局代理。
但是，当今主流的服务器都支持线程、进程或 greenlet ，以提高并发性。 Flask 的基础
库 Werkzeug 对于线程、进程或 greenlet 都能够提供良好的支持。

与社区沟通
---------------------------

Flask 开发者非常乐于帮助大家。因此，如果发现 Flask 有什么问题，请立即通过邮件
列表或 IRC 与社区进行沟通。对于 Flask 及其扩展的开发都来说，提升其在大型应用中
的功能的最佳途径是倾听用户的心声。
