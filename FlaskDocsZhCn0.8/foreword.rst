前言
====

在使用 Flask 前请阅读本文。本文有助于理解 Flask 的用途和目的，以便于决策是否
应当使用 Flask 。

“微”是什么意思？
-----------------------

对我来说，微框架中的“微”字不仅仅代表框架本身的简单和轻量，同时还意味着较高的
自由度。 Flask 替你选定了一个模板引擎，但是不会替你选定数据储存的方式或者其他
东西。

同时“微”字不代表整个框架只能塞在一个 Python 文件内。

Flask 的设计思路之一是简单的任务应当保持简单并且不会占用很多代码，同时还不能
限制住自己。因此有些人可能会对我们的一些设计选择感到惊讶或不正统。例如， Flask
内部使用了本地线程对象，因此用不着为了线程安全的原因而在一个请求之内把对象在
函数之间来回传递。虽然这个设计选择很容易实现，并且可以节省大量时间，但是在非常
大的项目中会出现问题。因为这些本地线程对象会在同一线程中的任何地方发生变化。
为了解决这个问题，我们不是把本地线程隐藏起来，而是接受它们，并且提供请多工具以
便于你更好的使用它们。

Flask 是按惯例配置的，这意味着很多事情是预先设定的。例如，按照惯例，模板和静态
文件是放在应用的 Python 源代码树的子目录内的。虽然这是可以改变的，但通常没有
必要。

Flask 之所以被称为“微框架”的主要原因是保持核心简单且易于扩展。没有数据库抽象
层，也没有表单验证或其他已经有现成的库可以处理的东西。但是 Flask 可以轻松扩展，
让你把其他库引进来成为 Flask 的一部分，协同工作。目前已知的可用扩展有对象关系
映射、表单验证、上传处理和各种开放验证等待。

Flask 的基础非常扎实，其本身并没有多少代码。因此它很容易适合大型应用。我们确信
你可以通过子类继承或直接修改源代码来轻松定制。如果你对大型应用感兴趣，请查看《
:ref:`becomingbig` 》。

如果对 Flask 的设计原则感兴趣，请查看《 :ref:`design` 》。

Web 开发是一件危险的事
----------------------------

这不是一个玩笑。好吧，也许有一点。如果你开发了一个 Web 应用，那么可能会让用户
注册并把他们的数据保存在服务器上。用户把数据托付给了你。哪怕你的应用只是给自己
用的，你也会希望数据完好无损。

不幸的是， Web 应用的安全性是千疮百孔的，可以攻击的方法太多了。 Flask 可以防御
现代 Web 应用最常见的安全攻击：跨站代码攻击（ XSS ）。 Flask 和 下层的 Jinja2
模板引擎会保护你免受这种攻击，除非故意把不安全的 HTML 代码放进来。但是安全攻击
的方法依然还有很多。

这里警示你：在 web 开发过程中要时刻注意安全问题。一些安全问题远比想象的要复杂
得多。我们有时会低估程序的弱点，直到被一个聪明人利用这个弱点来攻击我们的程序。
不要以为你的应用不重要，还不足以别人来攻击。没准是自动化机器人用垃圾邮件或恶意
软件链接等东西来填满你宝贵的数据库。

因此，做 web 开发时，安全要牢记在心。


Python 3 的情况
----------------------

目前， Python 社区正处在改进库的过程中，以便于加强对 Python 语言的新迭代的
支持。虽然现在情况已经有很大改善，但是还是存在一些问题使我们难以下决心现在就
转向 Python 3 。部分原因是 Python 语言中的变动长时间未经审核，还有部分原因是
我们还没有想好底层 API 针对 Python 3 中 unicode 处理方式的变化应该如何改动。

Werkzeug 和 Flask 会在变动方案找到后立即移植到 Python 3 ，并且我们会指导你把
现在的应用升级到 Python 3 。但在这之前，我们强烈建议你在开发过程中使用Python
2.6 或开启 Python 3 警告的 Python 2.7 。如果你计划在近期升级到 Python 3 ，强烈
推荐阅读 `如何编写向前兼容的 Python 代码
<http://lucumr.pocoo.org/2011/1/22/forwards-compatible-python/>`_ 。
